/*思想和最长公共子串一致，基本的二维dp，dp[i][j]每次只用到了dp[i-1][j-1]，故可以想办法优化成一维数组，dp[j]，j从高往低遍历，dp[j-1]即是dp[i-1][j-1]*/
class Solution {
    public int findLength(int[] A, int[] B) {
        int m = A.length, n = B.length, max = 0;
        int[][] dp = new int[m+1][n+1];//the max common len ending with A[i-1] and B[j-1]
        for(int i = 1; i < m+1; i ++){
            // dp[i][0] = 0;
            for(int j = 1; j < n+1; j ++){
                // dp[0][j] = 0;
                if(A[i-1] == B[j-1]){
                    dp[i][j] = dp[i-1][j-1]+1;
                    max = Math.max(max, dp[i][j]);
                    
                }
                // else{
                //     dp[i][j] = 0;
                // }                
            }
        }
        return max;        
    }
}


class Solution {
    public int findLength(int[] A, int[] B) {
        int m = A.length, n = B.length, max = 0;
        int[] dp = new int[n+1];//dp[j] means the max common len ending with B[j] for every A[i], j iterates from high to low, so dp[]
        for(int i = 1; i < m+1; i ++){
            for(int j = n; j > 0; j --){
                if(A[i-1] == B[j-1]){
                    dp[j] = dp[j-1]+1;
                    max = Math.max(max, dp[j]);                    
                }else{
                    dp[j] = 0;
                }           
            }
        }
        return max;        
    }
}
