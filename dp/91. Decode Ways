1、O(n)空间复杂度
class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        if(n==0){return 0;}
        int[] dp = new int[n+1];//dp[i]为s[i-1]结尾的字符串的编码数
        dp[0] = 1;
        dp[1] = s.charAt(0) == '0' ? 0 : 1;
        for(int i = 2; i <= n; i ++){
            char curr = s.charAt(i-1); 
            char pre = s.charAt(i-2);
            if(curr=='0'){
                dp[i]=0;//无论取一位或者两位都无法编码
            }else{
                dp[i]=dp[i-1];//可以取一位编码，方案数等于到前一位的可能方案数
            }
            if(pre=='2' && curr >= '0' && curr <= '6'
              || pre=='1'){
                dp[i]+=dp[i-2];//可以取两位
            }
        }
        return dp[n];
    }
}

2、常数空间
class Solution {
    public int numDecodings(String s) {       
        int prePreNum = 1;
        int preNum = s.charAt(0) == '0' ? 0 : 1;
        for(int i = 2; i <= s.length(); i ++){
            char curr = s.charAt(i-1); 
            char pre = s.charAt(i-2);
            int currNum = 0;
            if(curr!='0'){
                currNum=preNum;//可以取一位编码，方案数等于到前一位的可能方案数
            }
            if(pre=='2' && curr >= '0' && curr <= '6'
              || pre=='1'){
                currNum+=prePreNum;//可以取两位
            }
            prePreNum = preNum;
            preNum = currNum;
        }
        return preNum;
    }
}
